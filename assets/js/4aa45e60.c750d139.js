"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[3969],{3168:a=>{a.exports=JSON.parse('{"permalink":"/develbyte/blog/how-to-sort-a-hashmap-on-values","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2015-05-25-how-to-sort-a-hashmap-on-values.md","source":"@site/blog/2015-05-25-how-to-sort-a-hashmap-on-values.md","title":"How to sort a HashMap on Values","description":"HashMap doesn\'t preserve any order by default. If order is required we need to sort it explicitly according to the requirement.","date":"2015-05-25T00:00:00.000Z","tags":[{"inline":false,"label":"Java","permalink":"/develbyte/blog/tags/java","description":"Java programming language"},{"inline":false,"label":"Coding","permalink":"/develbyte/blog/tags/coding","description":"Programming and coding practices"},{"inline":false,"label":"Data Structures","permalink":"/develbyte/blog/tags/data-structure","description":"Data structures and algorithms"},{"inline":false,"label":"Algorithms","permalink":"/develbyte/blog/tags/algorithms","description":"Algorithm design and analysis"}],"readingTime":1.11,"hasTruncateMarker":false,"authors":[{"name":"Narendra Dubey","title":"Builder of Data Systems and Software","url":"https://im-naren.github.io/about/","page":{"permalink":"/develbyte/blog/authors/narendra"},"socials":{"github":"https://github.com/im-naren","linkedin":"https://www.linkedin.com/in/im-naren/","email":"mailto:naren.dubey@zoho.com"},"imageURL":"https://github.com/im-naren.png","key":"narendra"}],"frontMatter":{"slug":"how-to-sort-a-hashmap-on-values","title":"How to sort a HashMap on Values","authors":["narendra"],"tags":["java","coding","data-structure","algorithms"],"date":"2015-05-25T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Normalisation","permalink":"/develbyte/blog/normalisation"},"nextItem":{"title":"How to Implement Singly Linked List in Java","permalink":"/develbyte/blog/how-to-implement-singly-linked-list-in-java"}}')},7782:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>n,toc:()=>p});var n=t(3168),r=t(4848),s=t(8453);const o={slug:"how-to-sort-a-hashmap-on-values",title:"How to sort a HashMap on Values",authors:["narendra"],tags:["java","coding","data-structure","algorithms"],date:new Date("2015-05-25T00:00:00.000Z")},i="How to sort a HashMap on Values",l={authorsImageUrls:[void 0]},p=[{value:"HasMap sorting by Value",id:"hasmap-sorting-by-value",level:2},{value:"SortHashMap.java",id:"sorthashmapjava",level:3},{value:"Output",id:"output",level:3}];function u(a){const e={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...a.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"HashMap doesn't preserve any order by default. If order is required we need to sort it explicitly according to the requirement."}),"\n",(0,r.jsx)(e.p,{children:"In this article I have tried to explain how to sort a HasMap based on values."}),"\n",(0,r.jsx)(e.h2,{id:"hasmap-sorting-by-value",children:"HasMap sorting by Value"}),"\n",(0,r.jsx)(e.p,{children:"in this example I have used TreeMap to sort the HashMap. unlike a HashMap, a TreeMap guarantees that its elements will be sorted in ascending key order."}),"\n",(0,r.jsx)(e.h3,{id:"sorthashmapjava",children:"SortHashMap.java"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TreeMap;\n\npublic class SortHashMap {\n\n    public static void main(String[] args) {\n\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n        ValueComparator vcmp =  new ValueComparator(map);\n        TreeMap<String,Integer> sorted_map = new TreeMap<String,Integer>(vcmp);\n\n        map.put("naren",96);\n        map.put("ram",97);\n        map.put("manish",970);\n        map.put("kumar",97);\n        map.put("shruti",97);\n        map.put("rohit",760);\n        map.put("vatsal",444);\n\n        System.out.println("unsorted map: "+map);\n\n        sorted_map.putAll(map);\n\n        System.out.println("results: "+sorted_map);\n    }\n}\n\nclass ValueComparator implements Comparator<String> {\n\n    Map<String, Integer> base;\n    public ValueComparator(Map<String, Integer> base) {\n        this.base = base;\n    }\n\n    // Note: this comparator imposes orderings that are inconsistent with equals.    \n    public int compare(String a, String b) {\n        if (base.get(a) >= base.get(b)) {\n            return -1;\n        } else {\n            return 1;\n        } // returning 0 would merge keys\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"output",children:"Output"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"unsorted map: {manish=970, kumar=97, ram=97, rohit=760, shruti=97, vatsal=444, naren=96}\nresults: {manish=970, rohit=760, vatsal=444, shruti=97, ram=97, kumar=97, naren=96}\n"})})]})}function m(a={}){const{wrapper:e}={...(0,s.R)(),...a.components};return e?(0,r.jsx)(e,{...a,children:(0,r.jsx)(u,{...a})}):u(a)}},8453:(a,e,t)=>{t.d(e,{R:()=>o,x:()=>i});var n=t(6540);const r={},s=n.createContext(r);function o(a){const e=n.useContext(s);return n.useMemo(function(){return"function"==typeof a?a(e):{...e,...a}},[e,a])}function i(a){let e;return e=a.disableParentContext?"function"==typeof a.components?a.components(r):a.components||r:o(a.components),n.createElement(s.Provider,{value:e},a.children)}}}]);